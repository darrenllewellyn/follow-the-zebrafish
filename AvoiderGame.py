import sys, pygame, math, random

# Starter code for an avoider game. Written by David Johnson for COMP1010 University of Utah.

# Finished game author:
#Darren Llewellyn
#u0720798

# This function loads a series of sprite images stored in a folder with a
# consistent naming pattern: sprite_##. It returns a list of the images.
def load_piskell_sprite(sprite_folder_name, number_of_frames):
    frames = []
    # Figure out how many digits are in the frame number
    padding = math.ceil(math.log(number_of_frames,10))
    for frame in range(number_of_frames):
        folder_and_file_name = sprite_folder_name + "/sprite_" + str(frame).rjust(padding,'0') +".png"
        frames.append(pygame.image.load(folder_and_file_name).convert_alpha())

    return frames

# This function bounces a rectangle between the start and end pos. The bounce happens over num_frame frames.
# So the bigger the num_frame value is, the slower it goes (the bounce takes more frames).
# The rect is modified to be at the new position - a rect is not returned.
# Start and end pos are tuples of (x,y) coordinates on the window. You will likely need to experiment to find
# good coordinates.
def bounce_rect_between_two_positions( rect, start_pos, end_pos, num_frame, frame_count ):
    if frame_count%num_frame < num_frame/2:
        new_pos_x = start_pos[0] + (end_pos[0] - start_pos[0]) * (frame_count%(num_frame/2))/(num_frame/2)
        new_pos_y = start_pos[1] + (end_pos[1] - start_pos[1]) * (frame_count%(num_frame/2))/(num_frame/2)
    else:
        new_pos_x = end_pos[0] + (start_pos[0] - end_pos[0]) * (frame_count%(num_frame/2))/(num_frame/2)
        new_pos_y = end_pos[1] + (start_pos[1] - end_pos[1]) * (frame_count%(num_frame/2))/(num_frame/2)

    rect.center = (new_pos_x, new_pos_y)

#  Function for naming frames for animated backgrounds
#  (basically load_piskell_sprite but for different labels)
def name_for_background_list(level_folder, label, frame_count):
    background_list = []
    padding = math.ceil(math.log(frame_count, 10))
    for frame in range(frame_count):
        sequence_name = level_folder + "/" + label + str(frame).rjust(padding,'0') + ".png"
        background_list.append(pygame.image.load(sequence_name).convert_alpha())
    return background_list

def snag_n_f_b_l(level_folder, label, frame_count):
    background_list = []
    for frame in range(1000, frame_count):
        sequence_name = level_folder + "/" + label + str(frame) + ".png"
        background_list.append(pygame.image.load(sequence_name).convert_alpha())
    return background_list

#Timer per level
def time(level):
    if level == 1:
        time = int(858/30)
    elif level == 2:
        time = int(1210/30)
    return time

#  Functions for enemy paths
def zombie_angle(pt_1, pt_2):
    y_neg = False
    x_length = 1136
    y_length = pt_1[1] - pt_2[1]
    if y_length < 0:
        y_neg = True
        y_length = y_length * -1
    op_ad = y_length / x_length
    angle = math.degrees(math.atan(op_ad))
    if y_neg:
        angle = angle * -1
    return angle

def zombie_path(pt_1, pt_2):
    path_pts = []
    x_length = 1136
    y_length = pt_1[1] - pt_2[1]
    y_neg = False
    if y_length < 0:
        y_neg = True
        y_length = y_length * -1
    x_step = x_length / 8
    y_step = y_length / 8
    for chunk in range(0,11):
        new_x = chunk * x_step
        if y_neg:
            new_y = pt_1[1] + (y_step * chunk)
        else:
            new_y = pt_1[1] - (y_step * chunk)
        path_pts.append((new_x, new_y))
    return path_pts

def random_y():
    rand_y = random.randint(20, 660)
    return rand_y

def random_x():
    rand_x = random.randint(150,900)
    return rand_x

def enemy_roll():
    roll = random.randint(1,500)
    return roll

def zombie_pts():
    pt_1 = (0, random_y())
    pt_2 = (1136, random_y())
    pts = [pt_1, pt_2]
    return pts

#Just to contain all the colors
def color_sets(set_index):
    start_color = [(83, 8, 0, 255), (126, 64, 16, 255), (104, 29, 4, 255), (120, 52, 8, 255), (154, 86, 14, 255),
                   (107, 40, 5, 255), (145, 78, 12, 255), (81, 17, 3, 255), (91, 19, 2, 255), (135, 69, 10, 255),
                   (75, 16, 4, 255), (148,77,11,255), (108,39,4,255), (116,48,5,255), (124,56,11,255),]
    safe_colors = [(193, 97, 16, 255), (185, 94, 20, 255), (175, 99, 30, 255), (182, 100, 27, 255), (182, 87, 22, 255),
                   (182, 94, 21, 255), (185, 96, 23, 255), (187, 97, 22, 255), (190, 98, 23, 255), (232, 138, 30, 255),
                   (244, 151, 29, 255), (215, 119, 28, 255), (215, 117, 28, 255), (175, 87, 23, 255),
                   (177, 87, 24, 255), (131, 79, 22, 255), (142, 62, 15, 255), (156, 78, 22, 255), (144, 63, 14, 255),
                   (132, 56, 10, 255), (121, 52, 13, 255), (125, 54, 12, 255), (97, 53, 17, 255), (230, 135, 30, 255),
                   (205, 129, 29, 255)]
    death_colors = [(4, 2, 1, 255), (1, 2, 2, 255), (3, 3, 4, 255), (3, 2, 2, 255), (5, 2, 3, 255), (5, 5, 4, 255), (3, 5, 2, 255), (5, 9, 5, 255), (1, 3, 0, 255), (9, 10, 7, 255), (11, 15, 11, 255), (8, 12, 8, 255), (14, 23, 13, 255), (12, 18, 12, 255), (8, 14, 8, 255), (0, 0, 0, 255), (5, 5, 2, 255), (6, 5, 6, 255), (11, 12, 11, 255), (10, 18, 9, 255), (12, 20, 10, 255), (17, 26, 12, 255), (18, 35, 13, 255), (23, 47, 18, 255), (28, 49, 17, 255), (22, 47, 13, 255), (18, 43, 13, 255), (17, 38, 12, 255), (15, 34, 13, 255), (11, 30, 8, 255), (18, 39, 16, 255), (22, 37, 14, 255), (21, 42, 16, 255), (14, 34, 10, 255), (23, 52, 17, 255), (23, 51, 13, 255), (19, 47, 15, 255), (13, 31, 11, 255), (26, 38, 18, 255), (11, 25, 4, 255), (29, 59, 17, 255), (22, 56, 16, 255), (27, 55, 16, 255), (19, 54, 14, 255), (21, 59, 14, 255), (26, 63, 17, 255), (26, 67, 16, 255), (29, 70, 16, 255), (24, 60, 15, 255), (17, 51, 11, 255), (14, 43, 11, 255), (25, 58, 15, 255), (20, 61, 13, 255), (24, 66, 11, 255), (18, 51, 14, 255), (23, 63, 13, 255), (34, 78, 17, 255), (32, 76, 12, 255), (26, 73, 12, 255), (16, 47, 12, 255), (39, 84, 15, 255), (45, 93, 11, 255), (48, 97, 10, 255), (39, 97, 11, 255), (43, 98, 14, 255), (39, 92, 11, 255), (60, 109, 14, 255), (68, 114, 17, 255), (81, 122, 20, 255), (77, 131, 21, 255), (86, 137, 22, 255), (89, 143, 23, 255), (84, 144, 22, 255), (87, 148, 22, 255), (94, 150, 24, 255), (90, 152, 22, 255), (93, 155, 22, 255), (96, 158, 23, 255), (100, 159, 23, 255), (98, 162, 23, 255), (101, 165, 24, 255), (82, 141, 22, 255), (102, 162, 23, 255), (103, 167, 24, 255), (81, 136, 20, 255), (83, 129, 21, 255), (63, 90, 15, 255), (49, 94, 18, 255), (62, 100, 14, 255), (68, 107, 15, 255), (68, 122, 19, 255), (62, 121, 18, 255), (64, 125, 18, 255), (67, 128, 20, 255), (55, 113, 15, 255), (44, 102, 11, 255), (40, 88, 11, 255), (35, 88, 15, 255), (35, 81, 13, 255), (35, 85, 13, 255), (49, 102, 11, 255), (56, 118, 16, 255), (76, 135, 20, 255), (66, 119, 19, 255), (19, 57, 13, 255), (14, 38, 9, 255), (31, 73, 15, 255), (39, 102, 9, 255), (47, 110, 13, 255), (61, 118, 18, 255), (30, 84, 12, 255), (53, 110, 13, 255), (72, 132, 20, 255), (107, 167, 24, 255), (116, 179, 25, 255), (109, 173, 24, 255), (105, 169, 23, 255), (109, 170, 24, 255), (112, 174, 24, 255), (119, 179, 26, 255), (71, 127, 20, 255), (60, 114, 16, 255), (114, 176, 26, 255), (74, 110, 17, 255), (123, 183, 26, 255), (125, 185, 30, 255), (76, 117, 19, 255), (108, 150, 23, 255), (96, 135, 21, 255), (89, 128, 21, 255), (35, 97, 9, 255), (76, 125, 20, 255), (78, 139, 21, 255), (30, 80, 14, 255), (48, 106, 10, 255), (34, 93, 12, 255), (23, 55, 12, 255), (33, 67, 15, 255), (31, 66, 12, 255), (36, 69, 16, 255), (11, 27, 8, 255), (13, 27, 12, 255), (9, 22, 8, 255), (12, 24, 10, 255), (12, 11, 8, 255), (7, 7, 6, 255), (13, 14, 13, 255), (16, 17, 14, 255), (8, 9, 8, 255), (17, 27, 16, 255), (23, 34, 13, 255), (22, 17, 11, 255), (17, 22, 16, 255), (17, 31, 14, 255), (32, 65, 18, 255), (39, 79, 17, 255), (30, 62, 13, 255), (7, 19, 5, 255), (28, 44, 14, 255), (42, 107, 10, 255), (25, 70, 13, 255), (9, 6, 7, 255), (10, 10, 10, 255), (16, 13, 10, 255), (101, 142, 22, 255), (54, 73, 15, 255), (21, 33, 19, 255), (26, 80, 10, 255), (1, 1, 0, 255), (7, 7, 8, 255), (47, 77, 16, 255), (48, 115, 14, 255), (31, 88, 9, 255), (32, 50, 13, 255), (34, 55, 18, 255), (44, 72, 14, 255), (1, 2, 2, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (10, 10, 10, 255), (11, 12, 11, 255), (10, 10, 10, 255), (6, 5, 6, 255), (1, 2, 2, 255), (3, 3, 4, 255), (9, 6, 7, 255), (5, 5, 4, 255), (3, 3, 4, 255), (3, 2, 2, 255), (4, 2, 1, 255), (4, 2, 1, 255), (5, 2, 3, 255), (236, 143, 26, 255), (233, 139, 27, 255), (239, 143, 27, 255), (230, 135, 22, 255), (88, 55, 21, 255), (38, 37, 30, 255), (3, 3, 3, 255), (10, 7, 8, 255), (8, 8, 8, 255), (5, 5, 5, 255), (9, 9, 9, 255), (9, 11, 10, 255), (13, 13, 13, 255), (14, 17, 14, 255), (14, 17, 14, 255), (7, 10, 7, 255), (13, 16, 13, 255), (15, 18, 15, 255), (8, 21, 8, 255), (11, 21, 10, 255), (12, 24, 13, 255), (12, 25, 10, 255), (13, 23, 11, 255), (17, 32, 17, 255), (14, 29, 14, 255), (18, 33, 18, 255), (15, 25, 14, 255), (11, 13, 11, 255), (12, 15, 12, 255), (8, 10, 8, 255), (7, 7, 7, 255), (4, 4, 5, 255), (6, 6, 6, 255), (4, 2, 4, 255), (5, 3, 3, 255), (3, 3, 5, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (4, 2, 2, 255), (5, 3, 3, 255), (3, 3, 3, 255), (3, 3, 5, 255), (6, 6, 6, 255), (5, 3, 5, 255), (4, 4, 7, 255), (3, 5, 7, 255), (9, 6, 9, 255), (4, 4, 4, 255), (15, 15, 15, 255), (12, 20, 13, 255), (7, 12, 9, 255), (24, 29, 21, 255), (15, 36, 14, 255), (24, 62, 19, 255), (22, 68, 12, 255), (42, 102, 18, 255), (64, 124, 21, 255), (70, 130, 21, 255), (69, 129, 20, 255), (39, 111, 12, 255), (16, 36, 13, 255), (8, 13, 7, 255), (9, 9, 9, 255), (9, 9, 9, 255), (6, 6, 6, 255), (6, 5, 8, 255), (3, 3, 5, 255), (3, 3, 3, 255), (4, 3, 4, 255), (3, 3, 5, 255), (3, 3, 3, 255), (5, 3, 5, 255), (5, 3, 5, 255), (4, 1, 4, 255), (3, 3, 3, 255), (4, 1, 4, 255), (4, 2, 2, 255), (4, 1, 4, 255), (2, 2, 2, 255), (3, 2, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (4, 1, 4, 255), (2, 2, 2, 255), (3, 2, 2, 255), (4, 2, 2, 255), (4, 1, 4, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 5, 255), (4, 4, 7, 255), (4, 4, 5, 255), (6, 6, 6, 255), (10, 10, 10, 255), (9, 14, 8, 255), (14, 21, 13, 255), (17, 23, 15, 255), (21, 52, 18, 255), (41, 93, 16, 255), (51, 112, 12, 255), (37, 106, 17, 255), (44, 108, 17, 255), (43, 105, 17, 255), (35, 98, 6, 255), (18, 42, 18, 255), (9, 11, 8, 255), (4, 4, 7, 255), (6, 4, 4, 255), (6, 4, 4, 255), (4, 4, 4, 255), (6, 5, 5, 255), (4, 4, 4, 255), (4, 4, 4, 255), (5, 4, 4, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (9, 6, 7, 255), (5, 3, 3, 255), (4, 4, 4, 255), (5, 3, 3, 255), (6, 4, 4, 255), (5, 3, 3, 255), (3, 3, 5, 255), (4, 4, 7, 255), (6, 4, 4, 255), (9, 6, 7, 255), (9, 11, 10, 255), (12, 12, 12, 255), (11, 13, 8, 255), (13, 16, 13, 255), (10, 17, 11, 255), (13, 21, 12, 255), (13, 21, 12, 255), (17, 24, 14, 255), (16, 31, 20, 255), (15, 30, 13, 255), (23, 36, 22, 255), (17, 27, 14, 255), (13, 27, 9, 255), (23, 38, 19, 255), (14, 32, 12, 255), (17, 25, 16, 255), (14, 14, 14, 255), (6, 9, 8, 255), (5, 3, 6, 255), (5, 3, 5, 255), (5, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (6, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (10, 7, 10, 255), (8, 8, 6, 255), (18, 28, 18, 255), (18, 38, 17, 255), (21, 47, 14, 255), (18, 47, 16, 255), (19, 42, 9, 255), (19, 42, 20, 255), (30, 75, 10, 255), (48, 109, 15, 255), (67, 123, 21, 255), (76, 132, 24, 255), (93, 146, 20, 255), (81, 147, 26, 255), (100, 158, 29, 255), (100, 164, 31, 255), (67, 135, 18, 255), (54, 113, 14, 255), (92, 151, 25, 255), (101, 164, 26, 255), (94, 159, 24, 255), (87, 151, 28, 255), (65, 122, 19, 255), (61, 108, 14, 255), (29, 77, 14, 255), (31, 55, 20, 255), (18, 35, 18, 255), (15, 21, 13, 255), (14, 14, 14, 255), (6, 4, 7, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 5, 255), (6, 4, 7, 255), (6, 4, 7, 255), (7, 7, 7, 255), (7, 7, 7, 255), (7, 7, 7, 255), (9, 6, 9, 255), (4, 2, 4, 255), (6, 5, 8, 255), (2, 2, 2, 255), (7, 5, 6, 255), (14, 19, 12, 255), (24, 53, 19, 255), (50, 98, 10, 255), (83, 135, 25, 255), (90, 158, 22, 255), (104, 170, 26, 255), (112, 175, 25, 255), (113, 174, 24, 255), (110, 174, 26, 255), (110, 171, 26, 255), (101, 167, 21, 255), (101, 166, 23, 255), (106, 167, 28, 255), (98, 161, 20, 255), (93, 160, 25, 255), (95, 155, 22, 255), (95, 160, 25, 255), (100, 163, 25, 255), (100, 158, 22, 255), (90, 150, 26, 255), (79, 143, 26, 255), (62, 120, 21, 255), (34, 89, 11, 255), (23, 61, 16, 255), (16, 39, 14, 255), (14, 17, 14, 255), (3, 3, 3, 255), (5, 3, 3, 255), (8, 8, 8, 255), (8, 8, 8, 255), (7, 7, 7, 255), (6, 6, 6, 255), (10, 10, 10, 255), (9, 9, 9, 255), (9, 9, 9, 255), (8, 8, 8, 255), (10, 10, 10, 255), (8, 8, 8, 255), (9, 9, 9, 255), (7, 7, 7, 255), (4, 4, 4, 255), (1, 1, 1, 255), (6, 6, 6, 255), (9, 9, 9, 255), (8, 8, 8, 255), (6, 6, 6, 255), (21, 31, 20, 255), (50, 99, 14, 255), (71, 127, 19, 255), (58, 115, 15, 255), (55, 118, 14, 255), (68, 127, 22, 255), (66, 123, 19, 255), (70, 124, 17, 255), (78, 132, 25, 255), (10, 21, 3, 255), (12, 21, 4, 255), (11, 22, 7, 255), (12, 21, 4, 255), (13, 22, 4, 255), (10, 22, 2, 255), (10, 21, 7, 255), (11, 22, 2, 255), (61, 123, 16, 255), (32, 92, 7, 255), (28, 81, 14, 255), (27, 96, 1, 255), (31, 86, 11, 255), (22, 51, 14, 255), (17, 27, 13, 255), (7, 7, 7, 255), (7, 5, 6, 255), (3, 3, 3, 255), (4, 4, 4, 255), (8, 8, 8, 255), (9, 7, 7, 255), (8, 8, 8, 255), (10, 7, 8, 255), (5, 5, 5, 255), (10, 10, 10, 255), (9, 9, 9, 255), (8, 8, 8, 255), (10, 10, 10, 255), (11, 11, 11, 255), (7, 7, 5, 255), (1, 1, 1, 255), (1, 1, 1, 255), (2, 2, 2, 255), (1, 3, 2, 255), (2, 3, 1, 255), (2, 2, 2, 255), (1, 1, 1, 255), (11, 11, 11, 255), (15, 15, 15, 255), (23, 20, 19, 255), (9, 9, 9, 255), (4, 4, 4, 255), (6, 6, 6, 255), (6, 6, 6, 255), (17, 28, 12, 255), (13, 21, 12, 255), (18, 41, 18, 255), (24, 54, 16, 255), (22, 55, 16, 255), (20, 74, 16, 255), (20, 75, 15, 255), (35, 89, 18, 255), (34, 85, 2, 255), (39, 93, 11, 255), (21, 77, 14, 255), (50, 109, 19, 255), (38, 83, 15, 255), (25, 51, 13, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (6, 6, 6, 255), (6, 6, 6, 255), (3, 3, 3, 255), (2, 2, 1, 255), (1, 1, 1, 255), (2, 2, 2, 255), (5, 7, 7, 255), (6, 4, 4, 255), (6, 4, 4, 255), (5, 3, 5, 255), (3, 3, 5, 255), (6, 6, 6, 255), (19, 22, 17, 255), (11, 16, 13, 255), (14, 17, 14, 255), (15, 25, 14, 255), (13, 21, 12, 255), (17, 24, 16, 255), (5, 15, 8, 255), (14, 22, 13, 255), (5, 8, 5, 255), (5, 3, 3, 255), (4, 2, 2, 255), (4, 1, 4, 255), (4, 2, 2, 255), (5, 3, 3, 255), (5, 3, 3, 255), (3, 3, 3, 255), (4, 4, 4, 255), (4, 4, 4, 255), (6, 6, 6, 255), (4, 4, 4, 255), (5, 3, 5, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (3, 2, 2, 255), (5, 3, 5, 255), (6, 4, 7, 255), (7, 10, 9, 255), (9, 9, 8, 255), (9, 11, 8, 255), (8, 9, 10, 255), (9, 9, 9, 255), (7, 7, 7, 255), (8, 8, 8, 255), (4, 5, 5, 255), (7, 7, 7, 255), (6, 4, 4, 255), (5, 3, 5, 255), (5, 3, 3, 255), (4, 2, 2, 255), (3, 3, 3, 255), (2, 2, 4, 255), (2, 2, 2, 255), (4, 2, 2, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (4, 2, 2, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 5, 255), (4, 2, 2, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (2, 2, 2, 255), (2, 2, 4, 255), (4, 1, 4, 255), (2, 2, 5, 255), (4, 1, 4, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 1, 3, 255), (2, 2, 4, 255), (3, 2, 2, 255), (4, 2, 2, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 2, 2, 255), (4, 1, 4, 255), (4, 1, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (2, 2, 3, 255), (2, 2, 3, 255), (2, 2, 3, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (4, 1, 4, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (3, 2, 2, 255), (4, 2, 2, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (5, 3, 5, 255), (5, 3, 5, 255), (4, 1, 4, 255), (4, 1, 4, 255), (5, 3, 5, 255), (5, 3, 5, 255), (5, 3, 5, 255), (4, 3, 4, 255), (4, 3, 4, 255), (4, 3, 4, 255), (5, 3, 5, 255), (5, 3, 5, 255), (5, 3, 5, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (5, 3, 5, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 4, 255), (4, 1, 3, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 1, 4, 255), (2, 2, 4, 255), (2, 2, 4, 255), (4, 1, 4, 255), (2, 2, 2, 255), (4, 1, 4, 255), (4, 1, 4, 255), (5, 3, 5, 255), (2, 2, 2, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 4, 255), (5, 3, 3, 255), (5, 3, 5, 255), (4, 1, 4, 255), (3, 2, 4, 255), (2, 2, 4, 255), (4, 1, 4, 255), (5, 3, 3, 255), (5, 3, 3, 255), (3, 3, 1, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 3, 255), (3, 3, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 3, 255), (3, 3, 3, 255), (2, 2, 2, 255), (3, 3, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (2, 2, 2, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (3, 3, 3, 255), (3, 3, 3, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (2, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (2, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 2, 2, 255), (4, 5, 2, 255), (2, 4, 3, 255), (4, 2, 2, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (6, 3, 3, 255), (5, 3, 3, 255), (4, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (7, 2, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (4, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (4, 4, 4, 255), (4, 4, 4, 255), (4, 4, 4, 255), (4, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (4, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (3, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 3, 255), (5, 3, 5, 255), (3, 3, 5, 255), (3, 3, 5, 255), (3, 3, 5, 255), (3, 3, 3, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (6, 4, 4, 255), (7, 5, 6, 255), (4, 4, 4, 255), (7, 5, 5, 255), (4, 4, 4, 255), (6, 6, 6, 255), (6, 6, 6, 255), (7, 5, 5, 255), (7, 5, 6, 255), (7, 5, 6, 255), (6, 4, 4, 255), (5, 3, 3, 255), (4, 4, 4, 255), (4, 4, 4, 255), (6, 4, 4, 255), (2, 2, 2, 255), (4, 4, 4, 255), (3, 3, 3, 255), (3, 3, 3, 255), (4, 4, 4, 255), (4, 4, 4, 255), (4, 4, 4, 255), (4, 4, 4, 255), (3, 3, 3, 255), (5, 4, 4, 255), (5, 4, 4, 255), (6, 6, 6, 255), (7, 5, 6, 255), (7, 5, 6, 255), (7, 7, 7, 255), (11, 8, 9, 255), (5, 3, 3, 255), (7, 4, 5, 255), (8, 5, 6, 255), (10, 7, 8, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (3, 3, 4, 255), (1, 2, 2, 255), (3, 3, 4, 255), (5, 2, 3, 255), (3, 3, 4, 255), (7, 7, 8, 255), (9, 6, 7, 255), (6, 5, 6, 255), (6, 5, 6, 255), (5, 5, 4, 255), (6, 5, 6, 255), (2, 1, 3, 255), (1, 2, 2, 255), (3, 3, 4, 255), (3, 3, 4, 255), (5, 5, 4, 255), (3, 3, 4, 255), (3, 3, 4, 255), (2, 1, 3, 255), (5, 9, 5, 255), (11, 15, 11, 255), (12, 18, 12, 255), (11, 15, 11, 255), (6, 5, 6, 255), (3, 3, 4, 255), (5, 2, 3, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (9, 10, 7, 255), (28, 49, 17, 255), (18, 51, 14, 255), (33, 67, 15, 255), (31, 66, 12, 255), (33, 67, 15, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (36, 69, 16, 255), (26, 63, 17, 255), (18, 43, 13, 255), (15, 34, 13, 255), (21, 42, 16, 255), (28, 49, 17, 255), (28, 44, 14, 255), (22, 37, 14, 255), (33, 67, 15, 255), (40, 88, 11, 255), (7, 19, 5, 255), (7, 19, 5, 255), (7, 19, 5, 255), (7, 19, 5, 255), (18, 35, 13, 255), (27, 76, 13, 255), (19, 54, 14, 255), (18, 51, 14, 255), (16, 47, 12, 255), (19, 47, 15, 255), (19, 54, 14, 255), (24, 60, 15, 255), (36, 69, 16, 255), (33, 67, 15, 255), (35, 85, 13, 255), (8, 14, 8, 255), (12, 18, 12, 255), (11, 12, 11, 255), (5, 9, 5, 255), (17, 31, 14, 255), (22, 37, 14, 255), (26, 38, 18, 255), (28, 49, 17, 255), (27, 55, 16, 255), (33, 67, 15, 255), (33, 67, 15, 255), (36, 73, 16, 255), (39, 97, 11, 255), (7, 19, 5, 255), (7, 19, 5, 255), (42, 89, 18, 255), (25, 58, 15, 255), (30, 62, 13, 255), (18, 51, 14, 255), (14, 38, 9, 255), (17, 38, 12, 255), (23, 52, 17, 255), (29, 59, 17, 255), (25, 58, 15, 255), (29, 59, 17, 255), (25, 58, 15, 255), (21, 59, 14, 255), (24, 60, 15, 255), (24, 60, 15, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 63, 17, 255), (26, 67, 16, 255), (23, 63, 13, 255), (26, 63, 17, 255), (23, 63, 13, 255), (26, 63, 17, 255), (26, 67, 16, 255), (29, 70, 16, 255), (24, 66, 11, 255), (35, 81, 13, 255), (39, 92, 11, 255), (48, 106, 10, 255), (62, 121, 18, 255), (76, 135, 20, 255), (87, 148, 22, 255), (96, 158, 23, 255), (96, 158, 23, 255), (90, 152, 22, 255), (82, 141, 22, 255), (64, 125, 18, 255), (56, 118, 16, 255), (35, 97, 9, 255), (35, 97, 9, 255), (48, 106, 10, 255), (68, 122, 19, 255), (81, 136, 20, 255), (90, 152, 22, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (96, 158, 23, 255), (93, 155, 22, 255), (96, 158, 23, 255), (96, 158, 23, 255), (90, 152, 22, 255), (87, 148, 22, 255), (87, 148, 22, 255), (87, 148, 22, 255), (90, 152, 22, 255), (90, 152, 22, 255), (90, 152, 22, 255), (90, 152, 22, 255), (90, 152, 22, 255), (90, 152, 22, 255), (87, 148, 22, 255), (100, 159, 23, 255), (100, 159, 23, 255), (89, 143, 23, 255), (36, 69, 16, 255), (23, 55, 12, 255), (23, 55, 12, 255), (23, 51, 13, 255), (18, 43, 13, 255), (17, 38, 12, 255), (17, 38, 12, 255), (15, 34, 13, 255), (14, 34, 10, 255), (13, 31, 11, 255), (14, 34, 10, 255), (15, 34, 13, 255), (22, 47, 13, 255), (14, 38, 9, 255), (21, 42, 16, 255), (17, 38, 12, 255), (18, 39, 16, 255), (14, 38, 9, 255), (18, 39, 16, 255), (18, 43, 13, 255), (18, 43, 13, 255), (19, 47, 15, 255), (18, 39, 16, 255), (21, 42, 16, 255), (21, 42, 16, 255), (23, 47, 18, 255), (23, 52, 17, 255), (22, 47, 13, 255), (22, 47, 13, 255), (23, 51, 13, 255), (22, 56, 16, 255), (22, 56, 16, 255), (24, 60, 15, 255), (29, 59, 17, 255), (22, 43, 8, 255), (21, 33, 19, 255), (13, 27, 12, 255), (17, 31, 14, 255), (14, 23, 13, 255), (17, 31, 14, 255), (17, 26, 12, 255), (17, 31, 14, 255), (27, 55, 16, 255), (18, 39, 16, 255), (14, 34, 10, 255), (14, 34, 10, 255), (17, 38, 12, 255), (18, 43, 13, 255), (22, 47, 13, 255), (19, 54, 14, 255), (19, 54, 14, 255), (25, 58, 15, 255), (21, 59, 14, 255), (21, 59, 14, 255), (24, 60, 15, 255), (24, 60, 15, 255), (24, 60, 15, 255), (26, 63, 17, 255), (23, 47, 18, 255), (11, 27, 8, 255), (14, 38, 9, 255), (12, 20, 10, 255), (17, 26, 12, 255), (12, 20, 10, 255), (12, 20, 10, 255), (17, 27, 16, 255), (14, 23, 13, 255), (14, 23, 13, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 20, 10, 255), (12, 20, 10, 255), (12, 20, 10, 255), (17, 27, 16, 255), (17, 38, 12, 255), (11, 27, 8, 255), (13, 27, 12, 255), (11, 27, 8, 255), (12, 24, 10, 255), (12, 24, 10, 255), (13, 27, 12, 255), (14, 23, 13, 255), (12, 20, 10, 255), (12, 20, 10, 255), (8, 14, 8, 255), (8, 12, 8, 255), (8, 12, 8, 255), (5, 9, 5, 255), (3, 3, 4, 255), (7, 7, 6, 255), (6, 5, 6, 255), (6, 5, 6, 255), (10, 10, 10, 255), (11, 12, 11, 255), (10, 10, 10, 255), (10, 10, 10, 255), (3, 3, 4, 255), (5, 5, 4, 255), (3, 3, 4, 255), (1, 2, 2, 255), (3, 3, 4, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (1, 2, 2, 255), (4, 2, 1, 255), (4, 2, 1, 255), (4, 2, 1, 255), (3, 3, 4, 255), (3, 3, 4, 255), (6, 5, 6, 255), (8, 9, 8, 255), (6, 5, 6, 255), (6, 5, 6, 255), (5, 2, 3, 255), (2, 1, 3, 255), (3, 3, 4, 255), (5, 2, 3, 255), (6, 5, 6, 255), (8, 9, 8, 255), (13, 14, 13, 255), (8, 14, 8, 255), (11, 12, 11, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (13, 14, 13, 255), (10, 10, 10, 255), (7, 7, 6, 255), (8, 9, 8, 255), (8, 12, 8, 255), (8, 14, 8, 255), (13, 14, 13, 255), (6, 5, 6, 255), (13, 14, 13, 255), (16, 17, 14, 255), (9, 10, 7, 255), (12, 11, 8, 255), (8, 9, 8, 255), (8, 9, 8, 255), (8, 9, 8, 255), (7, 7, 6, 255), (12, 11, 8, 255), (8, 14, 8, 255), (5, 9, 5, 255), (9, 10, 7, 255), (12, 18, 12, 255), (17, 38, 12, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (25, 70, 13, 255), (23, 63, 13, 255), (21, 42, 16, 255), (14, 23, 13, 255), (11, 15, 11, 255), (7, 7, 8, 255), (10, 10, 10, 255), (7, 7, 6, 255), (5, 9, 5, 255), (13, 14, 13, 255), (3, 5, 2, 255), (8, 14, 8, 255), (21, 33, 19, 255), (9, 22, 8, 255), (47, 110, 13, 255), (11, 25, 4, 255), (11, 25, 4, 255), (48, 106, 10, 255), (26, 73, 12, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (26, 67, 16, 255), (23, 63, 13, 255), (24, 60, 15, 255), (34, 93, 12, 255), (72, 132, 20, 255), (87, 148, 22, 255), (105, 169, 23, 255), (123, 183, 26, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (76, 117, 19, 255), (74, 110, 17, 255), (74, 110, 17, 255), (68, 107, 15, 255), (68, 107, 15, 255), (62, 100, 14, 255), (68, 107, 15, 255), (62, 100, 14, 255), (76, 117, 19, 255), (40, 88, 11, 255), (32, 76, 12, 255), (32, 65, 18, 255), (17, 38, 12, 255), (17, 31, 14, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (12, 24, 10, 255), (9, 22, 8, 255), (9, 22, 8, 255), (9, 22, 8, 255), (11, 27, 8, 255), (14, 38, 9, 255), (14, 34, 10, 255), (11, 27, 8, 255), (9, 22, 8, 255), (11, 25, 4, 255), (10, 18, 9, 255), (10, 18, 9, 255), (10, 18, 9, 255), (10, 18, 9, 255), (5, 9, 5, 255), (3, 5, 2, 255), (3, 5, 2, 255), (3, 5, 2, 255), (3, 5, 2, 255), (3, 5, 2, 255), (5, 9, 5, 255), (120, 183, 25, 255), (35, 59, 12, 255), (54, 105, 12, 255), (50, 67, 1, 255), (34, 58, 1, 255), (34, 67, 9, 255), (34, 58, 9, 255), (25, 50, 9, 255), (25, 42, 9, 255), (17, 42, 1, 255), (16, 42, 9, 255), (17, 34, 1, 255), (17, 34, 9, 255), (15, 42, 1, 255), (42, 67, 9, 255), (50, 75, 9, 255), (58, 75, 1, 255), (57, 75, 1, 255), (42, 67, 1, 255), (34, 67, 1, 255), (58, 83, 1, 255), (42, 75, 9, 255), (50, 75, 1, 255), (42, 75, 1, 255), (50, 83, 1, 255), (25, 50, 1, 255), (25, 58, 9, 255), (21, 57, 6, 255), (33, 58, 9, 255), (27, 57, 6, 255), (34, 59, 10, 255), (34, 60, 2, 255), (37, 68, 6, 255), (42, 68, 3, 255), (42, 75, 3, 255), (42, 76, 9, 255), (49, 76, 9, 255), (58, 84, 4, 255), (49, 69, 4, 255), (60, 83, 9, 255), (59, 66, 3, 255), (34, 60, 3, 255), (21, 45, 6, 255), (25, 42, 1, 255), (18, 42, 3, 255), (18, 35, 4, 255), (26, 42, 15, 255), (12, 42, 3, 255), (24, 37, 14, 255), (18, 43, 3, 255), (18, 42, 2, 255), (19, 43, 3, 255), (20, 45, 6, 255), (28, 53, 6, 255), (26, 51, 3, 255), (26, 59, 2, 255), (27, 59, 2, 255), (33, 66, 6, 255), (50, 76, 4, 255), (45, 69, 5, 255), (43, 69, 10, 255), (43, 68, 3, 255), (49, 68, 3, 255), (34, 50, 1, 255), (17, 42, 9, 255), (19, 43, 9, 255), (26, 50, 9, 255), (27, 59, 3, 255), (37, 69, 5, 255), (35, 68, 3, 255), (43, 76, 4, 255), (42, 76, 4, 255), (34, 75, 3, 255), (34, 69, 2, 255), (42, 69, 10, 255), (36, 75, 4, 255), (35, 75, 3, 255), (19, 50, 9, 255), (20, 50, 9, 255), (18, 43, 2, 255), (27, 51, 3, 255), (21, 43, 6, 255), (20, 58, 3, 255), (28, 67, 9, 255), (28, 67, 3, 255), (33, 69, 2, 255), (34, 75, 4, 255), (43, 90, 4, 255), (49, 92, 9, 255), (50, 93, 9, 255), (56, 99, 5, 255), (50, 93, 4, 255), (36, 78, 5, 255), (28, 68, 2, 255), (27, 52, 3, 255), (20, 44, 6, 255), (13, 50, 3, 255), (19, 51, 3, 255), (29, 57, 6, 255), (28, 67, 2, 255), (35, 74, 3, 255), (35, 75, 4, 255), (44, 91, 4, 255), (51, 93, 4, 255), (51, 93, 9, 255), (45, 90, 4, 255), (45, 86, 6, 255), (27, 66, 3, 255), (27, 68, 9, 255), (29, 58, 7, 255), (20, 51, 3, 255), (20, 58, 2, 255), (28, 68, 3, 255), (33, 74, 1, 255), (45, 90, 5, 255), (44, 92, 4, 255), (43, 82, 4, 255), (33, 66, 5, 255), (53, 98, 6, 255), (51, 92, 9, 255), (43, 83, 3, 255), (19, 51, 9, 255), (12, 34, 9, 255), (12, 35, 4, 255), (11, 35, 4, 255), (13, 42, 9, 255), (35, 69, 3, 255), (42, 84, 9, 255), (50, 92, 4, 255), (51, 98, 9, 255), (37, 78, 5, 255), (43, 83, 4, 255), (35, 68, 2, 255), (19, 34, 9, 255), (12, 42, 9, 255), (18, 35, 9, 255), (28, 68, 10, 255), (35, 69, 2, 255), (36, 78, 4, 255), (45, 98, 5, 255), (62, 57, 12, 255), (53, 55, 1, 255), (44, 58, 9, 255), (45, 50, 9, 255), (25, 34, 1, 255), (42, 58, 1, 255), (25, 58, 1, 255), (50, 67, 9, 255), (57, 83, 9, 255), (59, 83, 9, 255), (58, 82, 4, 255), (49, 82, 9, 255), (57, 84, 4, 255), (50, 84, 4, 255), (50, 82, 9, 255), (59, 84, 9, 255), (49, 77, 9, 255), (49, 76, 4, 255), (37, 68, 5, 255), (43, 60, 3, 255), (42, 68, 2, 255), (43, 76, 9, 255), (42, 69, 3, 255), (35, 67, 2, 255), (34, 59, 9, 255), (29, 51, 6, 255), (27, 43, 3, 255), (34, 51, 3, 255), (34, 51, 10, 255), (34, 66, 6, 255), (34, 68, 2, 255), (34, 66, 5, 255), (34, 50, 9, 255), (25, 67, 1, 255), (32, 75, 1, 255), (34, 68, 9, 255), (32, 75, 9, 255), (36, 83, 9, 255), (36, 82, 4, 255), (35, 76, 4, 255), (42, 83, 4, 255), (69, 122, 5, 255), (75, 127, 8, 255), (69, 122, 9, 255), (75, 115, 5, 255), (69, 122, 4, 255), (69, 123, 9, 255), (67, 116, 4, 255), (67, 112, 7, 255), (76, 114, 9, 255), (67, 115, 4, 255), (65, 107, 5, 255), (68, 114, 9, 255), (69, 121, 9, 255), (67, 115, 5, 255), (76, 115, 9, 255), (68, 115, 4, 255), (78, 109, 7, 255), (76, 116, 9, 255), (75, 124, 5, 255), (79, 126, 7, 255), (77, 124, 9, 255), (86, 123, 6, 255), (77, 125, 7, 255), (85, 133, 6, 255), (85, 134, 6, 255), (77, 125, 9, 255), (84, 133, 6, 255), (78, 125, 7, 255), (67, 116, 5, 255), (68, 116, 5, 255), (75, 116, 5, 255), (69, 116, 5, 255), (68, 112, 9, 255), (67, 114, 9, 255), (70, 122, 5, 255), (85, 123, 5, 255), (92, 144, 7, 255), (93, 145, 7, 255), (96, 145, 6, 255), (94, 145, 7, 255), (83, 133, 6, 255), (91, 146, 7, 255), (93, 134, 15, 255), (97, 144, 7, 255), (94, 145, 6, 255), (80, 131, 6, 255), (87, 134, 6, 255), (76, 124, 9, 255), (76, 125, 7, 255), (76, 125, 9, 255), (77, 124, 7, 255), (82, 124, 5, 255), (78, 123, 5, 255), (75, 122, 4, 255), (77, 123, 5, 255), (76, 122, 5, 255), (75, 114, 5, 255), (58, 99, 4, 255), (58, 93, 9, 255), (50, 84, 9, 255), (43, 77, 9, 255), (50, 85, 9, 255), (51, 85, 4, 255), (58, 93, 5, 255), (58, 99, 9, 255), (51, 92, 4, 255), (43, 77, 4, 255), (43, 84, 4, 255), (58, 83, 4, 255), (57, 92, 9, 255), (50, 85, 4, 255), (50, 98, 5, 255), (52, 94, 5, 255), (51, 98, 5, 255), (42, 85, 9, 255), (38, 78, 1, 255), (32, 78, 5, 255), (27, 68, 3, 255), (28, 60, 2, 255), (27, 60, 3, 255), (27, 60, 2, 255), (30, 60, 6, 255), (28, 59, 9, 255), (27, 52, 2, 255), (17, 43, 3, 255), (12, 43, 3, 255), (19, 35, 3, 255), (19, 35, 4, 255), (13, 42, 3, 255), (27, 45, 6, 255), (13, 43, 9, 255), (19, 44, 9, 255), (12, 43, 9, 255), (18, 36, 4, 255), (18, 43, 9, 255), (26, 52, 3, 255), (28, 58, 7, 255), (20, 51, 9, 255), (26, 59, 3, 255), (28, 69, 2, 255), (12, 35, 9, 255), (13, 37, 5, 255), (11, 35, 9, 255), (20, 42, 7, 255), (27, 51, 9, 255), (37, 69, 6, 255), (29, 60, 5, 255), (20, 42, 6, 255), (27, 44, 9, 255), (17, 50, 1, 255), (19, 45, 6, 255), (28, 44, 3, 255), (17, 36, 3, 255), (9, 34, 9, 255), (11, 25, 9, 255), (9, 25, 9, 255), (11, 26, 8, 255), (9, 17, 1, 255), (9, 17, 9, 255), (10, 17, 9, 255), (19, 21, 1, 255), (9, 25, 1, 255), (12, 25, 9, 255), (1, 25, 1, 255), (1, 25, 9, 255), (9, 42, 1, 255), (9, 42, 9, 255), (5, 27, 9, 255), (5, 26, 9, 255), (11, 21, 13, 255), (9, 19, 5, 255), (11, 27, 9, 255), (10, 27, 4, 255), (16, 58, 1, 255), (17, 50, 9, 255), (17, 58, 1, 255), (20, 59, 3, 255), (28, 76, 9, 255), (27, 67, 2, 255), (29, 68, 6, 255), (35, 76, 3, 255), (41, 75, 4, 255), (43, 69, 3, 255), (26, 68, 2, 255), (41, 70, 15, 255), (34, 59, 3, 255), (35, 59, 3, 255), (34, 52, 3, 255), (13, 33, 6, 255), (18, 32, 9, 255), (27, 68, 2, 255), (41, 84, 4, 255), (21, 66, 5, 255), (28, 74, 2, 255), (37, 74, 1, 255), (43, 85, 9, 255), (52, 99, 9, 255), (70, 104, 5, 255), (67, 122, 5, 255), (68, 122, 5, 255), (59, 100, 4, 255), (45, 91, 9, 255), (35, 78, 6, 255), (34, 75, 1, 255), (35, 76, 9, 255), (41, 75, 1, 255), (41, 83, 9, 255), (33, 67, 1, 255), (34, 75, 9, 255), (41, 82, 9, 255), (41, 90, 9, 255), (43, 89, 9, 255), (49, 90, 9, 255), (42, 91, 1, 255), (37, 86, 4, 255), (42, 83, 1, 255), (34, 83, 1, 255), (28, 82, 3, 255), (36, 76, 3, 255), (28, 68, 9, 255), (34, 83, 9, 255), (38, 86, 14, 255), (25, 83, 1, 255), (25, 75, 9, 255), (11, 34, 4, 255), (10, 28, 4, 255), (9, 34, 1, 255), (26, 52, 2, 255), (16, 35, 3, 255), (42, 83, 9, 255), (45, 86, 5, 255), (44, 86, 9, 255), (9, 34, 42, 255), (17, 34, 50, 255), (17, 34, 58, 255), (17, 42, 58, 255), (17, 25, 66, 255), (9, 21, 69, 255), (9, 21, 73, 255), (62, 169, 61, 255), (50, 146, 51, 255), (50, 146, 50, 255), (51, 146, 51, 255), (47, 121, 45, 255), (38, 117, 40, 255), (38, 140, 33, 255)]
    end_color = [(9, 17, 81, 255), (9,17,77,255), (9,17,78,255), (8, 16, 81, 255)]
    sets = [start_color, safe_colors, death_colors, end_color]
    return sets[set_index]
#  Colors reference
start_color = color_sets(0)
safe_colors = color_sets(1)
death_colors = color_sets(2)
end_color = color_sets(3)

def main():

    # Initialize pygame
    pygame.init()

    # Store window width and height in different forms for easy access (ADD IF STATEMENT FOR LEVEL 1 OR 2?)
    window = pygame.image.load("level_1_background/background000.png")
    map_size = window.get_size()
    map_rect = window.get_rect()
    text_center = int(map_size[0])/2

    # create the window
    screen = pygame.display.set_mode((1136,686), pygame.RESIZABLE)

    # Game Switches:
    level_1_clear = False
    level_2_clear = False
    continue_switch = False
    next_switch = False
    game_over = False
    unflipped = True
    zombie_go = False
    z_pts = []
    glowless_go = False
    glowless_madness = False
    safe_switch = False
    hide_behind_fish = False
    chance = []
    finish = []
    done = False

    level_1_background = name_for_background_list('level_1_background', 'background', 858)
    level_2_background = name_for_background_list('level_2_background', 'background0', 1000) + snag_n_f_b_l('level_2_background_2', 'background', 1211)
    start_gate = pygame.image.load('start_gate.png').convert()
    start_gate_2 = pygame.image.load('start_gate_2.png').convert()
    start_gate_rect = start_gate.get_rect()

    #edit frame count when you add more!!
    #NEED TO BREAK UP FRAMES TO REGULAR LEVEL START

    # Load the sprite frames from the folder

    #TATO
    tato = load_piskell_sprite("tato", 131)
    tato_rect = tato[0].get_rect()
    dead_tato = pygame.image.load('dead_tato.png').convert_alpha()
    dead_tato_rect = dead_tato.get_rect()
    flipped_dead_tato = 0
    ghost_tato = pygame.image.load('ghost_tato.png').convert_alpha()
    ghost_tato_rect = ghost_tato.get_rect()

    # Enemies
    zombie = pygame.image.load("zombie.png").convert_alpha()
    zombie_rect = zombie.get_rect()
    z_warn = pygame.image.load("peek_in.png").convert_alpha()
    z_warn_rect = z_warn.get_rect()
    z_path = 0
    r_zombie = 0
    glowless = load_piskell_sprite("glowless",77)
    glowless_rect = glowless[0].get_rect()

    #GAME_OVER_SEQ
    fade_in = load_piskell_sprite("game_over_fade", 32)
    fade_in_rect = fade_in[0].get_rect()
    try_again_button_rect = pygame.Rect(0,0,85,25)
    quit_button_rect = pygame.Rect(0,0,85,25)

    #WIN_SEQ
    win_seq = load_piskell_sprite("win_seq", 215)
    win_seq_rect = win_seq[0].get_rect()
    win_seq_rect.center = (568,333)
    continue_button_rect = pygame.Rect(0,0,200,100)
    continue_button_rect.center = (550,500)

    # The frame tells which sprite frame to draw
    frame_count = 0;

    # Counter for sequences that don't loop (one-timers)
    game_over_seq_count = 0
    win_seq_count = 0
    back_count = 0
    z_count = 0
    gl_count = 0

    # The clock helps us manage the frames per second of the animation
    clock = pygame.time.Clock()

    # Get a font
    myfont = pygame.font.SysFont('monospace', 25)
    deathfont = pygame.font.SysFont('monospace', 170)
    menufont = pygame.font.SysFont('monospace', 38)
    winfont = pygame.font.SysFont('monospace', 25)
    titlefont = pygame.font.SysFont('monospace', 85)

    # The started variable records if the start color has been clicked and the level started
    started = False

    # The is_alive variable records if anything bad has happened (off the path, touch guard, etc.)
    is_alive = True

    # Hide the arrow cursor and replace it with a sprite. Don't make this big or the checking for collisions
    # gets more complicated than just looking at the color under the cursor tip.
    pygame.mouse.set_visible(False)

    # This is the main game loop. In it we must:
    # - check for events
    # - update the scene
    # - draw the scene
    while is_alive:

        # Start gate
        if not started and not game_over and not done:
            if not level_1_clear:
                screen.blit(start_gate, start_gate_rect)
                title = titlefont.render('Follow The Zebrafish', True, (0,200,140,200))
                title_rect = title.get_rect()
                title_rect.center = (text_center, 60)
                screen.blit(title, title_rect)
            elif continue_switch:
                screen.blit(start_gate_2, start_gate_rect)
                safe_switch = False
        elif started and not done and not game_over:
            if not level_1_clear:
                if back_count < 857:
                    screen.blit(level_1_background[back_count], map_rect)
                else:
                    screen.blit(level_1_background[857], map_rect)
            elif continue_switch and not level_2_clear:
                if back_count < 1210:
                    screen.blit(level_2_background[back_count], map_rect)
                else:
                    screen.blit(level_2_background[1210], map_rect)

        # Now check for the color under the cursor. Don't draw the cursor sprite yet or the
        # color will be the cursor sprite color, not the scene.
        pos = pygame.mouse.get_pos()
        color_at_cursor = screen.get_at(pos)

        # Check events by looping over the list of events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                is_alive = False

        #"Hide" behind fish
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                hide_behind_fish = True
                tato_rect.center = pygame.mouse.get_pos()
            if event.type == pygame.KEYUP:
                hide_behind_fish = False

        # Add a mouse down event to look for clicking on the start color
            if event.type == pygame.MOUSEBUTTONDOWN:
                if color_at_cursor in start_color and not started:
                    frame_count = 0
                    back_count = 0
                    started = True
                elif try_again_button_rect.colliderect(ghost_tato_rect):
                    game_over = False
                    started = False
                    unflipped = True
                    back_count = 0
                    chance = []
                elif quit_button_rect.colliderect(ghost_tato_rect):
                    is_alive = False
                else:
                    is_alive = True
                if level_1_clear and next_switch:
                    continue_switch = True
                    started = False
                    win_seq_count = 0
                    next_switch = False
                elif color_at_cursor in end_color:
                    level_1_clear = True
                    chance = []

        #Enemy Activation
        if not chance:
            chance.append(random.randint(1,600))
            chance.append(random.randint(1, 740))

        if started and not safe_switch and not done:
            if back_count == chance[0]:
                zombie_go = True
            elif back_count == chance[1]:
                glowless_go = True
            if continue_switch and 601 <= back_count <= 898:
                glowless_madness = True
            else:
                glowless_madness = False

        #ZOMBIE_GO
        if zombie_go and started and not done and not safe_switch:
            if z_count == 0:
                if not z_pts:
                    z_pts.append(zombie_pts())
                else:
                    z_pts[0] = zombie_pts()
                z_warn_rect.center = z_pts[0][0]  ##
                z_path = zombie_path(z_pts[0][0], z_pts[0][1])
                r_zombie = pygame.transform.rotate(zombie, zombie_angle(z_pts[0][0], z_pts[0][1]))
            elif z_count < 15:
                screen.blit(z_warn, z_warn_rect)
            elif 35 <= z_count <= 44:
                path_steps = z_count - 35
                if path_steps < len(z_path):
                    zombie_rect.center = z_path[path_steps]
                screen.blit(r_zombie, zombie_rect)
                if not hide_behind_fish and not done:
                    if zombie_rect.colliderect(tato_rect):
                        game_over = True
            elif z_count == 45:
                zombie_go = False
                z_count = 0

        #GLOWLESS_GO
        if glowless_go and started and not done and not safe_switch:
            if gl_count == 0:
                glowless_rect.center = (random_x(), random_y())
                screen.blit(glowless[0], glowless_rect)
            if 10 < gl_count < 70 and glowless_rect.colliderect(tato_rect) and not hide_behind_fish:
                game_over = True
            elif gl_count == len(glowless) - 1:
                glowless_go = False
                gl_count = 0
            elif 0 < gl_count < 76:
                screen.blit(glowless[gl_count], glowless_rect)

        #GLOWLESS_MADNESS
        if glowless_madness:
            glowless_rect.center = (568,343)
            mad_1 = glowless_rect.copy().move(200,-160)
            mad_f1 = pygame.transform.flip(glowless[frame_count % (len(glowless))], True, False)
            mad_2 = glowless_rect.copy().move(375,150)
            mad_f2 = pygame.transform.flip(glowless[frame_count % (len(glowless))], True, False)
            screen.blit(glowless[frame_count%(len(glowless))], glowless_rect)
            screen.blit(mad_f1, mad_1)
            screen.blit(mad_f2, mad_2)
            if not hide_behind_fish and (mad_1.colliderect(tato_rect) or mad_2.colliderect(tato_rect) or glowless_rect.colliderect(tato_rect)):
                game_over = True


        #WIN SEQ
        if level_1_clear and not continue_switch:
            safe_switch = True
            screen.blit(pygame.image.load("back_win_seq.png"), map_rect)
            if win_seq_count < 215:
                screen.blit(win_seq[win_seq_count], win_seq_rect)
                win_seq_count += 1
            else:
                screen.blit(win_seq[214], win_seq_rect)
                win_text = winfont.render("Click anywhere to continue", True, (0,200,140,200))
                win_text_rect = win_text.get_rect()
                win_text_rect.center = (text_center, 520)
                screen.blit(win_text, win_text_rect)
                next_switch = True

        #Finish
        if level_2_clear:
            done = True
            if not finish:
                screen.blit(pygame.image.load("Finish.png").convert(), map_rect)
                finish.append('!')
            finish_text = titlefont.render("Thanks for playing!", True, (0,200,140,200))
            finish_text_rect = finish_text.get_rect()
            finish_text_rect.center = (text_center, 60)
            screen.blit(finish_text, finish_text_rect)

        #GAME OVER
        if game_over:
            #Fade
            if game_over_seq_count < 32:
                screen.blit(fade_in[game_over_seq_count], fade_in_rect)
            else:
                screen.blit(fade_in[31], fade_in_rect)

            # Set positions
            dead_pos = []
            if not dead_pos:
                dead_pos.append((tato_rect.x,tato_rect.y))
            x_lock = dead_pos[0][0]
            y_base = dead_pos[0][1]
            dead_tato_spot = (x_lock, y_base)
            floating_spot = (x_lock, 30)
            bob_spot = (x_lock, 37)
            y_gap = y_base - 30
            y_move = y_base - ((frame_count%y_gap))

            glowless_madness = False

            #Show dead tato and flip
            if unflipped:
                dead_tato_rect.center = dead_tato_spot
                screen.blit(dead_tato, dead_tato_rect)
                flipped_dead_tato = pygame.transform.flip(dead_tato, False, True)
                unflipped = False
            else:
                screen.blit(flipped_dead_tato, dead_tato_rect)

            # Float up to top
            if dead_tato_rect.y > 37:
                dead_tato_rect.center = (x_lock, y_move)
            else:
                # Bob in place
                bounce_rect_between_two_positions(dead_tato_rect, floating_spot, bob_spot, 35, frame_count)
                # Text
                game_over = deathfont.render("GAME OVER", True, (0, 250, 220, 225))
                game_over_rect = game_over.get_rect()
                game_over_rect.center = (text_center, 250)
                screen.blit(game_over, game_over_rect)
                try_again_text = menufont.render("Try Again?", True, (0,200,140,200))
                try_again_button_rect.center = (text_center - 10, 360)
                screen.blit(try_again_text, try_again_button_rect)
                quit_text = menufont.render("Quit?", True, (0,200,140,200))
                quit_button_rect.center = (text_center + 25, 430)
                screen.blit(quit_text, quit_button_rect)

            game_over_seq_count += 1

        # In the starter code I just print the color. Don't print it in your game as it will slow
        # things down. But you can use this to see the colors you need to be looking for to see if the cursor
        # is in a safe spot.
        # Note that the color has 4 values - the 4th is alpha, or transparency. If you want to compare colors
        # make sure that you compare all the values. An example would be
        #      color_at_cursor == (255, 0, 0, 255)
        # to see if the cursor is over a pure red area.
        # print(color_at_cursor)

        # Once you have the color at the cursor, check to see if you have gone off the path or if you have
        # touched the end color. You need to write code for this. The logic is that you need to see if the
        # level has been started, if you are at the end color, and if it is touching something bad.
        if started:
            if color_at_cursor in end_color:
                if level_1_clear:
                    level_2_clear = True
                else:
                    level_1_clear = True
                    back_count = 0
            elif color_at_cursor in death_colors and not safe_switch and not done:
                if not hide_behind_fish or (hide_behind_fish and not glowless_rect.colliderect(tato_rect)):
                    started = False
                    game_over = True
                elif hide_behind_fish and glowless_rect.colliderect(tato_rect):
                    game_over = False



        # Now move and draw the cursor sprite. Divide the frame_count by 10 (too slow) to slow the cycle down.
        if not game_over and not hide_behind_fish:
            tato_rect.center = pygame.mouse.get_pos()
            screen.blit(tato[(frame_count//1) % len(tato)], tato_rect)
        elif not hide_behind_fish:
            ghost_tato_rect.center = pygame.mouse.get_pos()
            screen.blit(ghost_tato, ghost_tato_rect)


        # TIMER & LEVEL
        if started and not game_over:
            if not level_1_clear:
                time_count = time(1) - int(frame_count / 30)
                level = myfont.render("Level 1", True, (0, 220, 160, 200))
                if time_count > 0:
                    screen.blit(level, (1000, 20))
                    timer = myfont.render(str(time_count), True, (0,220,160,200))
                    screen.blit(timer, (1000, 40))
            elif not level_2_clear and continue_switch:
                time_count = time(2) - int(frame_count / 30)
                level = myfont.render("Level 2", True, (0, 220, 160, 200))
                if time_count > 0:
                    screen.blit(level, (1000, 20))
                    timer = myfont.render(str(time_count), True, (0, 220, 160, 200))
                    screen.blit(timer, (1000, 40))

        # Every time through the loop, increase the frame count.
        frame_count += 1
        back_count += 1
        if zombie_go:
            z_count +=1
        if glowless_go:
            gl_count +=1

        # Bring drawn changes to the front
        pygame.display.update()

        # This tries to force the loop to run at 30 fps
        clock.tick(30)

    pygame.quit()
    sys.exit()


# Start the program
main()
